// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  role          Role      @default(user)
  isActive      Boolean   @default(true)
  discordId     String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  participants Participant[]
}

// Giveway

enum StatusGiveway {
  activo
  pendiente
  finalizado
}

model Giveway {
  id               String        @id @default(uuid())
  name             String
  slug             String        @unique
  status           StatusGiveway @default(pendiente)
  description      String?
  effectiveDate    DateTime
  participantLimit Int?
  quantityWinners  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prizes       Prize[]
  participants Participant[]
}

model Participant {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  giveaway   Giveway  @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
  giveawayId String
  createdAt  DateTime @default(now())
  winner     Boolean  @default(false)

  @@id([userId, giveawayId])
}

model Prize {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  giveaway   Giveway @relation(fields: [giveawayId], references: [id], onDelete: Cascade)
  giveawayId String
}
